/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Question } from "./Question";
import { QuestionCountArgs } from "./QuestionCountArgs";
import { QuestionFindManyArgs } from "./QuestionFindManyArgs";
import { QuestionFindUniqueArgs } from "./QuestionFindUniqueArgs";
import { CreateQuestionArgs } from "./CreateQuestionArgs";
import { UpdateQuestionArgs } from "./UpdateQuestionArgs";
import { DeleteQuestionArgs } from "./DeleteQuestionArgs";
import { ChoiceFindManyArgs } from "../../choice/base/ChoiceFindManyArgs";
import { Choice } from "../../choice/base/Choice";
import { ResponseFindManyArgs } from "../../response/base/ResponseFindManyArgs";
import { Response } from "../../response/base/Response";
import { QuestionService } from "../question.service";
@graphql.Resolver(() => Question)
export class QuestionResolverBase {
  constructor(protected readonly service: QuestionService) {}

  async _questionsMeta(
    @graphql.Args() args: QuestionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Question])
  async questions(
    @graphql.Args() args: QuestionFindManyArgs
  ): Promise<Question[]> {
    return this.service.questions(args);
  }

  @graphql.Query(() => Question, { nullable: true })
  async question(
    @graphql.Args() args: QuestionFindUniqueArgs
  ): Promise<Question | null> {
    const result = await this.service.question(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Question)
  async createQuestion(
    @graphql.Args() args: CreateQuestionArgs
  ): Promise<Question> {
    return await this.service.createQuestion({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Question)
  async updateQuestion(
    @graphql.Args() args: UpdateQuestionArgs
  ): Promise<Question | null> {
    try {
      return await this.service.updateQuestion({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Question)
  async deleteQuestion(
    @graphql.Args() args: DeleteQuestionArgs
  ): Promise<Question | null> {
    try {
      return await this.service.deleteQuestion(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Choice], { name: "choices" })
  async findChoices(
    @graphql.Parent() parent: Question,
    @graphql.Args() args: ChoiceFindManyArgs
  ): Promise<Choice[]> {
    const results = await this.service.findChoices(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Response], { name: "responses" })
  async findResponses(
    @graphql.Parent() parent: Question,
    @graphql.Args() args: ResponseFindManyArgs
  ): Promise<Response[]> {
    const results = await this.service.findResponses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Choice as PrismaChoice,
  Response as PrismaResponse,
  Question as PrismaQuestion,
} from "@prisma/client";

export class ChoiceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ChoiceCountArgs, "select">): Promise<number> {
    return this.prisma.choice.count(args);
  }

  async choices<T extends Prisma.ChoiceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChoiceFindManyArgs>
  ): Promise<PrismaChoice[]> {
    return this.prisma.choice.findMany<Prisma.ChoiceFindManyArgs>(args);
  }
  async choice<T extends Prisma.ChoiceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChoiceFindUniqueArgs>
  ): Promise<PrismaChoice | null> {
    return this.prisma.choice.findUnique(args);
  }
  async createChoice<T extends Prisma.ChoiceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChoiceCreateArgs>
  ): Promise<PrismaChoice> {
    return this.prisma.choice.create<T>(args);
  }
  async updateChoice<T extends Prisma.ChoiceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChoiceUpdateArgs>
  ): Promise<PrismaChoice> {
    return this.prisma.choice.update<T>(args);
  }
  async deleteChoice<T extends Prisma.ChoiceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChoiceDeleteArgs>
  ): Promise<PrismaChoice> {
    return this.prisma.choice.delete(args);
  }

  async findResponses(
    parentId: string,
    args: Prisma.ResponseFindManyArgs
  ): Promise<PrismaResponse[]> {
    return this.prisma.choice
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .responses(args);
  }

  async getQuestion(parentId: string): Promise<PrismaQuestion | null> {
    return this.prisma.choice
      .findUnique({
        where: { id: parentId },
      })
      .question();
  }
}
